user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules for enhanced security
load_module modules/ngx_http_modsecurity_module.so;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Enhanced logging with security fields
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'gzip=$gzip_ratio ssl=$ssl_protocol/$ssl_cipher';
    
    access_log /var/log/nginx/access.log security;
    
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;  # Hide nginx version
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    
    # Security: Prevent clickjacking
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit:10m;
    
    # Connection limits
    limit_conn conn_limit 10;
    
    # IP whitelisting - Define trusted networks
    geo $trusted_network {
        default 0;
        127.0.0.1/32 1;
        10.0.0.0/8 1;
        172.16.0.0/12 1;
        192.168.0.0/16 1;
        # Add specific trusted IPs here
        # 203.0.113.0/24 1;  # Example trusted network
    }
    
    # Map for blocking suspicious user agents
    map $http_user_agent $blocked_agent {
        default 0;
        ~*malicious 1;
        ~*scanner 1;
        ~*nikto 1;
        ~*sqlmap 1;
        ~*havij 1;
        ~*acunetix 1;
    }
    
    # SSL Configuration (if using HTTPS)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;
    
    # Upstream definitions with health checks
    upstream qbittorrent_backend {
        server vpn:8081 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream prowlarr_backend {
        server prowlarr:9696 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # qBittorrent reverse proxy with enhanced security
    server {
        listen 8080;
        server_name _;
        
        # Only allow trusted networks
        if ($trusted_network = 0) {
            return 403;
        }
        
        # Block suspicious user agents
        if ($blocked_agent) {
            return 403;
        }
        
        # Security headers - Defense in depth
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Authentication layer - Additional security
        location = /auth {
            internal;
            # Implement authentication check here
            # Could integrate with external auth service
            return 200;
        }
        
        # Rate limiting for authentication endpoints
        location ~ ^/api/v2/auth {
            limit_req zone=auth_limit burst=2 nodelay;
            limit_req_status 429;
            
            # Additional authentication check
            auth_request /auth;
            auth_request_set $auth_status $upstream_status;
            
            proxy_pass http://qbittorrent_backend;
            proxy_http_version 1.1;
            
            # Security headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Prevent response splitting
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Add security response headers
            add_header X-Auth-Status $auth_status always;
        }
        
        # API endpoints with rate limiting
        location ~ ^/api/ {
            # Rate limiting
            limit_req zone=api_limit burst=20 nodelay;
            limit_req_status 429;
            
            # Only allow specific HTTP methods
            limit_except GET POST {
                deny all;
            }
            
            proxy_pass http://qbittorrent_backend;
            proxy_http_version 1.1;
            
            # Headers for qBittorrent
            proxy_set_header Host vpn:8081;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host:8080;
            proxy_set_header X-Forwarded-Port 8080;
            
            # Security: Remove sensitive headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            proxy_hide_header X-AspNet-Version;
            
            # Timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Logging for security monitoring
            access_log /var/log/nginx/qbittorrent-api.log security;
        }
        
        # qBittorrent WebUI
        location / {
            # Additional IP check for WebUI access
            if ($remote_addr !~ ^(192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.|10\.)) {
                return 403;
            }
            
            proxy_pass http://qbittorrent_backend;
            proxy_http_version 1.1;
            
            # Headers for qBittorrent
            proxy_set_header Host vpn:8081;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host:8080;
            proxy_set_header X-Forwarded-Port 8080;
            
            # Security headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Disable buffering for streaming
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # WebSocket support (for qBittorrent WebUI updates)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Cache control
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
        }
        
        # Block access to sensitive paths
        location ~ /\. {
            deny all;
            return 404;
        }
        
        # Custom error pages
        error_page 403 /403.html;
        location = /403.html {
            internal;
            default_type text/html;
            return 403 '<html><body><h1>403 Forbidden</h1><p>Access denied from your IP address.</p></body></html>';
        }
        
        error_page 429 /429.html;
        location = /429.html {
            internal;
            default_type text/html;
            return 429 '<html><body><h1>429 Too Many Requests</h1><p>Rate limit exceeded. Please try again later.</p></body></html>';
        }
    }
    
    # Prowlarr reverse proxy with security
    server {
        listen 9696;
        server_name _;
        
        # Only allow trusted networks
        if ($trusted_network = 0) {
            return 403;
        }
        
        # Block suspicious user agents
        if ($blocked_agent) {
            return 403;
        }
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
        
        # Rate limiting for Prowlarr API
        location ~ ^/api/ {
            limit_req zone=api_limit burst=30 nodelay;
            
            proxy_pass http://prowlarr_backend;
            proxy_http_version 1.1;
            
            # Headers for Prowlarr
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host:9696;
            proxy_set_header X-Forwarded-Port 9696;
            
            # Preserve API key headers
            proxy_pass_request_headers on;
            
            # Security headers
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Extended timeouts for API calls
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # Logging
            access_log /var/log/nginx/prowlarr-api.log security;
        }
        
        # Prowlarr WebUI
        location / {
            proxy_pass http://prowlarr_backend;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # Disable buffering
            proxy_buffering off;
            proxy_request_buffering off;
            
            # Timeouts
            proxy_connect_timeout 120s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # Block sensitive paths
        location ~ /\. {
            deny all;
            return 404;
        }
    }
    
    # Health check endpoint
    server {
        listen 8888;
        server_name _;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location /nginx_status {
            stub_status;
            allow 127.0.0.1;
            deny all;
        }
    }
}