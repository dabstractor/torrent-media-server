# Docker Compose Environment Configuration for Media Server and Torrent Management
# Copy this file to .env and update with your specific values

# Network Configuration
# Define the subnet for your Docker network to avoid conflicts
MEDIA_NETWORK_SUBNET=10.244.0.0/16
VPN_NETWORK_SUBNET=10.233.0.0/16
VPN_DHCP_RANGE=10.233.1.0/24  # DHCP range must be within VPN_NETWORK_SUBNET, excludes static IPs (.0.x)

# VPN Configuration - Gluetun Unified VPN Client
# Supports multiple providers: Cloudflare WARP (default), Private Internet Access (PIA), and more
# Auto-configuration script handles credential management and wireguard config generation

# === QUICK START: Automated Setup (Recommended) ===
# 1. Choose your provider: warp (free, zero-config) or pia (requires account)
# 2. Set VPN_PROVIDER below
# 3. Run: ./scripts/setup-vpn.sh
# 4. Copy generated env variables to this file
# 5. Run: docker compose up -d

# Provider Selection
VPN_PROVIDER=warp                       # Options: warp, pia, custom
VPN_SERVICE_PROVIDER=custom             # Always 'custom' for wireguard-based providers
VPN_TYPE=wireguard                      # Always 'wireguard' for modern VPN protocols

# Gluetun Common Settings
VPN_HEALTH_CHECK_INTERVAL=30s
VPN_PORT_FORWARDING=on

# === WARP Configuration (Cloudflare WARP) ===
# Zero configuration required - just run: ./scripts/setup-vpn.sh
# WARP provides a free, fast VPN using Cloudflare's global network
#
# Setup Instructions:
# 1. Set VPN_PROVIDER=warp
# 2. Run: ./scripts/setup-vpn.sh
# 3. Copy the generated WARP_* and WG_* values below
# 4. Run: docker compose up -d

WARP_PRIVATE_KEY=
WARP_PUBLIC_KEY=
WARP_ENDPOINT_IP=
WARP_ENDPOINT_PORT=
WARP_ADDRESSES=

# === PIA Configuration (Private Internet Access) ===
# Requires PIA account credentials
# Setup Instructions:
# 1. Set VPN_PROVIDER=pia
# 2. Add your PIA credentials below
# 3. (Optional) Choose a region (defaults to us_atlanta)
# 4. Run: ./scripts/setup-vpn.sh
# 5. Copy the generated PIA_* and WG_* values to this file
# 6. Run: docker compose up -d

PIA_USERNAME=                           # Your PIA username (e.g., p1234567)
PIA_PASSWORD=                           # Your PIA password
PIA_REGION=us_atlanta                   # Region code (see: https://www.privateinternetaccess.com/pages/network)

PIA_PRIVATE_KEY=
PIA_PUBLIC_KEY=
PIA_ENDPOINT_IP=
PIA_ENDPOINT_PORT=
PIA_ADDRESSES=

# === Active Wireguard Configuration ===
# These WG_* variables are automatically set by setup-vpn.sh
# They mirror either WARP_* or PIA_* values depending on VPN_PROVIDER
# DO NOT edit these manually - they are managed by the setup script

WG_PRIVATE_KEY=
WG_PUBLIC_KEY=
WG_ENDPOINT_IP=
WG_ENDPOINT_PORT=
WG_ADDRESSES=
WG_ALLOWED_IPS=0.0.0.0/0

# Media Server Configuration
# SECURITY NOTE: Plex claim token is temporary and generated during setup
PLEX_CLAIM_TOKEN=
PLEX_EXTERNAL_PORT=32400
PLEX_USERNAME=
PLEX_SERVER_NAME=PlexServer

# Plex Authentication (required for watchlistarr)
# Watchlistarr automatically detects authentication - usually no manual setup needed!

# Plex Server Location (automatic detection)
# Only change if your Plex server is on a different host
PLEX_HOST=docker-host
PLEX_PORT=32400

# Authentication Methods (priority order):
# 1. AUTOMATIC: Leverages your existing Plex login (RECOMMENDED - zero config!)
# 2. CREDENTIALS: Traditional username/password (fully automated)
# 3. MANUAL TOKEN: For social sign-on users (one-time setup)

# Method 2: Traditional Plex Account (fully automated backup)
# If you created your Plex account with email/password (not social sign-on)
PLEX_USERNAME=your-plex-username
PLEX_PASSWORD=your-plex-password

# Method 3: Social Sign-On Users (manual token fallback)
# If automatic detection fails and you use Google/Facebook/Apple sign-in
# Get your token from: https://plex.tv/claim or Plex Settings > Network > Show Advanced
PLEX_TOKEN=your-plex-token-here



# Torrent Client Configuration
# Choose your torrent client: transmission or qbittorrent (default: transmission)
TORRENT_CLIENT=transmission

# qBittorrent Configuration (used when TORRENT_CLIENT=qbittorrent)
# SECURITY NOTE: These passwords will be generated securely at runtime if not provided
QBITTORRENT_USERNAME=admin
QBITTORRENT_PASSWORD=
QBITTORRENT_PORT=8080

# Transmission Configuration (used when TORRENT_CLIENT=transmission)
# Authentication is optional - leave empty for no authentication (recommended for local use)
TRANSMISSION_USERNAME=
TRANSMISSION_PASSWORD=
TRANSMISSION_PORT=51413
TRANSMISSION_RPC_PORT=9091

# Docker Compose profile control (matches TORRENT_CLIENT value)
COMPOSE_PROFILES=${TORRENT_CLIENT:-qbittorrent}

# Web UI Configuration
WEB_UI_PORT=8787

# Volume Paths
# Use absolute paths for persistent data storage
MEDIA_ROOT=./data/media
DOWNLOADS_ROOT=./data/downloads
CONFIG_ROOT=./config

# Timezone Configuration
TZ=America/New_York

# Optional: Firewall and Security
# Enable or disable specific service exposures
EXPOSE_PLEX=true
EXPOSE_QBITTORRENT=false

# Logging Configuration
LOG_LEVEL=info
LOG_MAX_SIZE=10m
LOG_MAX_FILE=3

# VPN Network Buffer Configuration
# Prevents "No buffer space available" errors that crash the VPN daemon
# Adjust based on your system's available RAM and torrent activity

# VPN Container Resources (Default: 8GB RAM systems)
VPN_MEMORY_LIMIT=1g                    # Memory limit for VPN container
VPN_MAX_FILE_DESCRIPTORS=32768         # Max open sockets/files (affects torrent connections)
VPN_NETWORK_BUFFER_SIZE=67108864       # 64MB network buffers (receive/send)
VPN_MAX_CONNECTIONS=5000               # Max concurrent network connections

# API Configuration
NODE_ENV=production
API_BASE_URL=http://localhost
PROWLARR_URL=http://prowlarr:9696
QBITTORRENT_URL=http://172.28.0.2:8080
PLEX_URL=http://plex:32400
FLARESOLVERR_URL=http://flaresolverr:8191

# API Keys - Generated Automatically at Runtime
# SECURITY NOTE: These will be generated securely during container initialization
PROWLARR_API_KEY=2feed2fe71424878bb7945ead222f367
SONARR_API_KEY=624fe2507ddb4a8bbf1d8924b0e07b17
RADARR_API_KEY=21861064a2834ef08f7c2f26957af672

# Service Instance Names
SONARR_INSTANCE_NAME=Sonarr
RADARR_INSTANCE_NAME=Radarr
PROWLARR_INSTANCE_NAME=Prowlarr
OVERSEERR_INSTANCE_NAME=Overseerr

# Jellyfin Configuration
JELLYFIN_PORT=8096
JELLYFIN_HTTPS_PORT=8920           # Optional HTTPS port
JELLYFIN_DISCOVERY_PORT=7359       # Client discovery (UDP)
JELLYFIN_DLNA_PORT=1900            # DLNA/UPnP (UDP)
JELLYFIN_URL=http://localhost:8096
JELLYFIN_BACKEND_URL=http://jellyfin:8096
JELLYFIN_API_KEY=

# Overseerr Configuration
OVERSEERR_URL=http://overseerr:5055
OVERSEERR_CLIENT_ID=
OVERSEERR_VAPID_PRIVATE=
OVERSEERR_VAPID_PUBLIC=

# Autoscan Configuration
AUTOSCAN_PORT=3030
AUTOSCAN_WEBHOOK_TOKEN=autoscan

# Cleanuparr - Automated Download Cleanup
CLEANUPARR_PORT=11011

# Authentication Configuration
AUTH_METHOD=None
AUTH_REQUIRED=DisabledForLocalAddresses

# Next.js Configuration
NEXT_TELEMETRY_DISABLED=1

# Worktree isolation and Port Configuration
CONTAINER_PREFIX=
VPN_BITTORRENT_PORT=17403
FLARESOLVERR_PORT=17571
NGINX_QBITTORRENT_PORT=8080
NGINX_TRANSMISSION_PORT=9091

# Dynamic nginx port selection based on TORRENT_CLIENT
# Set this to match your TORRENT_CLIENT choice:
# - For qbittorrent: use ${NGINX_QBITTORRENT_PORT} (8080)
# - For transmission: use ${NGINX_TRANSMISSION_PORT} (9091)
NGINX_TORRENT_PORT=9091

PROWLARR_PORT=9696
RADARR_PORT=7878
SONARR_PORT=8989
HUNTARR_PORT=9705

# Bazarr Configuration - Subtitle Automation
BAZARR_PORT=6767
BAZARR_API_KEY=
BAZARR_URL=http://localhost:6767
BAZARR_BACKEND_URL=http://bazarr:6767

# PIA_WIREGUARD_PORT=22995
# PIA_FLARESOLVERR_PORT=22322
# PIA_PROWLARR_PORT=11516

OVERSEERR_PORT=5055
JELLYSEER_PORT=5056
VPN_IP_ADDRESS=10.233.0.2

# SECURITY NOTES:
# 1. Copy this file to .env before first use
# 2. API keys and passwords will be generated automatically
# 3. VPN provider selection: Set VPN_PROVIDER=warp (no credentials) or VPN_PROVIDER=pia (requires credentials)
# 4. PIA credentials should be updated with your actual PIA account details if using PIA provider
# 5. Plex claim token is temporary - get from https://plex.tv/claim
# 6. Never commit the .env file to version control




