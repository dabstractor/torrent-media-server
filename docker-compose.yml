
# Custom networks for service isolation
networks:
  media_network:
    driver: bridge
    ipam:
      config:
        - subnet: ${MEDIA_NETWORK_SUBNET:-172.27.0.0/16}
  vpn_network:
    driver: bridge
    internal: true  # RESTORE: Complete isolation - no direct internet access
    ipam:
      config:
        - subnet: ${VPN_NETWORK_SUBNET:-172.29.0.0/16}

# Logging configuration
x-logging: &default-logging
  driver: json-file
  options:
    max-size: ${LOG_MAX_SIZE:-10m}
    max-file: ${LOG_MAX_FILE:-3}

# Using local directories instead of Docker volumes for easier management

services:
  # VPN Service - Default: Cloudflare WARP (no credentials needed)
  # To use PIA instead: docker-compose -f docker-compose.yml -f docker-compose.pia.yml up -d
  vpn:
    image: caomingjun/warp:latest
    container_name: ${CONTAINER_PREFIX:-torrents-}vpn
    env_file:
      - .env
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    privileged: true  # Required for iptables and routing setup
    ports:
      - "${VPN_BITTORRENT_PORT:-16881}:6881"     # qBittorrent BitTorrent port
      - "${VPN_BITTORRENT_PORT:-16881}:6881/udp" # qBittorrent BitTorrent port UDP
    environment:
      - WARP_SLEEP=2
      - TZ=${TZ:-America/New_York}
    networks:
      default:
      vpn_network:
        ipv4_address: ${VPN_SERVICE_IP:-172.29.0.2}
    volumes:
      - ./setup-vpn-routing.sh:/usr/local/bin/setup-vpn-routing.sh:ro
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv4.ip_forward=1
    healthcheck:
      test: ["CMD", "sh", "-c", "warp-cli --accept-tos status | grep -q 'Connected'"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # FlareSolverr - CloudFlare bypass proxy for Prowlarr indexers
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: ${CONTAINER_PREFIX:-torrents-}flaresolverr
    networks:
      - media_network
      - vpn_network
    ports:
      - "${FLARESOLVERR_PORT:-18191}:8191"
    depends_on:
      vpn:
        condition: service_healthy
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ:-America/New_York}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8191/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    stop_grace_period: 30s

  # qBittorrent - Torrent download client running through VPN
  qbittorrent:
    image: qbittorrentofficial/qbittorrent-nox:latest
    container_name: ${CONTAINER_PREFIX:-torrents-}qbittorrent
    network_mode: "container:${CONTAINER_PREFIX:-torrents-}vpn"  # Share VPN container's network stack (most secure isolation)
    # Port removed - access through Web-UI proxy only
    depends_on:
      vpn:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-America/New_York}
      - QBT_WEBUI_PORT=${QBITTORRENT_PORT:-8080}
      - QBT_EULA=accept
    volumes:
      - ./config/qbittorrent:/config
      - ./config/templates/qbittorrent:/templates:ro
      - ${DOWNLOADS_ROOT:-./data/downloads}:/downloads
      - ./data:/data
      - ./scripts:/scripts:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${QBITTORRENT_PORT:-8080}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    stop_grace_period: 60s

  # Plex Media Server
  plex:
    image: ghcr.io/linuxserver/plex
    container_name: ${CONTAINER_PREFIX:-torrents-}plex
    network_mode: host  # Required for discovery and direct play
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-America/New_York}
      - PLEX_CLAIM=${PLEX_CLAIM_TOKEN}
    volumes:
      - ./config/plex:/config
      - ./config/templates/plex:/templates:ro
      - ${MEDIA_ROOT:-./data/media}:/media
      - ${DOWNLOADS_ROOT:-./data/downloads}:/downloads
    ports:
      - ${PLEX_PORT:-42400}:32400
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:32400/web/index.html"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Sonarr - TV Series Management
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: ${CONTAINER_PREFIX:-torrents-}sonarr
    networks:
      - vpn_network
    depends_on:
      prowlarr:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./config/sonarr:/config
      - ./config/templates/sonarr:/templates:ro
      - ${MEDIA_ROOT:-./data/media}/tv:/tv
      - ${DOWNLOADS_ROOT:-./data/downloads}:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8989 > /dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    stop_grace_period: 60s

  # Radarr - Movie Management
  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: ${CONTAINER_PREFIX:-torrents-}radarr
    networks:
      - vpn_network
    depends_on:
      prowlarr:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./config/radarr:/config
      - ./config/templates/radarr:/templates:ro
      - ${MEDIA_ROOT:-./data/media}/movies:/movies
      - ${DOWNLOADS_ROOT:-./data/downloads}:/downloads
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:7878 > /dev/null 2>&1 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    stop_grace_period: 60s

  # Nginx Reverse Proxy - Secure bridge for accessing isolated services
  nginx-proxy:
    image: nginx:alpine
    container_name: ${CONTAINER_PREFIX:-torrents-}nginx-proxy
    networks:
      - media_network
      - vpn_network
    ports:
      - "${NGINX_QBITTORRENT_PORT:-18080}:8080"   # qBittorrent proxy
      - "${NGINX_PROWLARR_PORT:-19696}:9696"   # Prowlarr proxy
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Web UI - React frontend for managing the entire stack
  web-ui:
    build: ./web-ui
    container_name: ${CONTAINER_PREFIX:-torrents-}web-ui
    networks:
      - media_network
      - vpn_network
    ports:
      - "${WEB_UI_PORT:-18787}:3000"
    user: "1000:1000"  # Run as current user to match file ownership
    env_file:
      - .env
    depends_on:
      vpn:
        condition: service_healthy
      plex:
        condition: service_healthy
      qbittorrent:
        condition: service_healthy
      prowlarr:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PROWLARR_URL=http://prowlarr:9696
      - QBITTORRENT_URL=http://qbittorrent:${QBITTORRENT_PORT:-8080}
      - NEXT_TELEMETRY_DISABLED=1
      # Reverse proxy configuration for secure access
      - ENABLE_REVERSE_PROXY=true
      - QBITTORRENT_PROXY_PATH=/qbittorrent
      - PROWLARR_PROXY_PATH=/prowlarr
    volumes:
      - ${DOWNLOADS_ROOT:-./data/downloads}:/downloads
      - ${MEDIA_ROOT:-./data/media}:/media
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    stop_grace_period: 30s
    logging: *default-logging

  # Prowlarr - Torrent Indexer
  prowlarr:
    image: ghcr.io/linuxserver/prowlarr
    container_name: ${CONTAINER_PREFIX:-torrents-}prowlarr
    entrypoint: ["/scripts/prowlarr-entrypoint.sh"]
    networks:
      - media_network
      - vpn_network
    # Port removed - access through Web-UI proxy only  
    depends_on:
      vpn:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-America/New_York}
    volumes:
      - ./config/prowlarr:/config
      - ./config/templates/prowlarr:/templates:ro
      - ./scripts:/scripts:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f -H \"X-Api-Key: $$PROWLARR_API_KEY\" http://localhost:9696/api/v1/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    stop_grace_period: 60s
